//Arduino 1.0+ Only!
//Arduino 1.0+ Only!

#include <Wire.h>
#include <ADXL345.h>


ADXL345 adxl; //variable adxl is an instance of the ADXL345 library

const int ButtonPin = 2;
const int LEDPin = 9;
const int GLEDPin = 10;
const int RLEDPin = 11;
int button = 0;
int check = 0;

void setup(){
  
  pinMode(LEDPin, OUTPUT);
  pinMode(GLEDPin, OUTPUT);
  pinMode(RLEDPin, OUTPUT);
  pinMode(ButtonPin, INPUT);
  
  Serial.begin(9600);
  adxl.powerOn();

  //set activity/ inactivity thresholds (0-255)
  adxl.setActivityThreshold(75); //62.5mg per increment
  adxl.setInactivityThreshold(75); //62.5mg per increment
  adxl.setTimeInactivity(10); // how many seconds of no activity is inactive?
 
  //look of activity movement on this axes - 1 == on; 0 == off 
  adxl.setActivityX(1);
  adxl.setActivityY(1);
  adxl.setActivityZ(1);
 
  //look of inactivity movement on this axes - 1 == on; 0 == off
  adxl.setInactivityX(1);
  adxl.setInactivityY(1);
  adxl.setInactivityZ(1);
 
  //look of tap movement on this axes - 1 == on; 0 == off
  adxl.setTapDetectionOnX(0);
  adxl.setTapDetectionOnY(0);
  adxl.setTapDetectionOnZ(1);
 
  //set values for what is a tap, and what is a double tap (0-255)
  adxl.setTapThreshold(50); //62.5mg per increment
  adxl.setTapDuration(15); //625Î¼s per increment
  adxl.setDoubleTapLatency(80); //1.25ms per increment
  adxl.setDoubleTapWindow(200); //1.25ms per increment
 
  //set values for what is considered freefall (0-255)
  adxl.setFreeFallThreshold(7); //(5 - 9) recommended - 62.5mg per increment
  adxl.setFreeFallDuration(45); //(20 - 70) recommended - 5ms per increment
 
  //setting all interupts to take place on int pin 1
  //I had issues with int pin 2, was unable to reset it
  adxl.setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );
  adxl.setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );
  adxl.setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,    ADXL345_INT1_PIN );
  adxl.setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,     ADXL345_INT1_PIN );
  adxl.setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );
 
  //register interupt actions - 1 == on; 0 == off  
  adxl.setInterrupt( ADXL345_INT_SINGLE_TAP_BIT, 1);
  adxl.setInterrupt( ADXL345_INT_DOUBLE_TAP_BIT, 1);
  adxl.setInterrupt( ADXL345_INT_FREE_FALL_BIT,  1);
  adxl.setInterrupt( ADXL345_INT_ACTIVITY_BIT,   1);
  adxl.setInterrupt( ADXL345_INT_INACTIVITY_BIT, 1);
}

void loop(){
    
  int x,y,z;
  int i;
  
  //center values and thresholds for x,y and z sensitivity
  int tholdx = 50;
  int centerx = 13;
  int tholdy = 50;
  int centery = -8;
  int tholdz = 100;
  int centerz = 280;
 
  button = digitalRead(ButtonPin);
      
      digitalWrite(LEDPin, HIGH);
      adxl.readAccel(&x, &y, &z); //read the accelerometer values and store them in variables  x,y,z
      Serial.print("x============");
      Serial.println(x);
      Serial.print("y=======");
      Serial.println(y);
      Serial.print("z===");
      Serial.println(z);
      delay(100);
    
    
      //Fun Stuff!    
      //read interrupts source and look for triggerd actions
      
      //getInterruptSource clears all triggered actions after returning value
      //so do not call again until you need to recheck for triggered actions
       byte interrupts = adxl.getInterruptSource();
      
      // can add interupts if required
      
      
    
    if ((z < centerz - tholdz) && (x < centerx + tholdx) && (x > centerx - tholdx) && (y < centery + tholdy) && (y > centery - tholdy))
    {
      check = 1;
      digitalWrite(GLEDPin, HIGH);
      digitalWrite(RLEDPin, LOW);
    }
    else if ((z > centerz + tholdz) && (x < centerx + tholdx) && (x > centerx - tholdx) && (y < centery + tholdy) && (y > centery - tholdy))
    {
      check = 1;
      digitalWrite(GLEDPin, HIGH);
      digitalWrite(RLEDPin, LOW);
    }    
    else if (check == 0)
    {
      digitalWrite(RLEDPin, HIGH);
      digitalWrite(GLEDPin, LOW);
    }
    else if (button == HIGH)
    {
      digitalWrite(RLEDPin, HIGH);
      digitalWrite(GLEDPin, LOW);
    }      

}
